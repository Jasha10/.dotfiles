# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
# alt - t : yabai -m window --toggle float --grid 4:4:1:1:2:2

# toggle sticky(+float), picture-in-picture
# alt - p : yabai -m window --toggle sticky --toggle pip

# add an on_enter command to the default mode
# :: default : yabai -m config active_window_border_color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : yabai -m config active_window_border_color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# open terminal, blazingly fast compared to iTerm/Hyper
# cmd - return : /Applications/kitty.app/Contents/MacOS/kitty --single-instance -d ~

# open qutebrowser
# cmd + shift - return : ~/Scripts/qtb.sh

# open mpv
# cmd - m : open -na /Applications/mpv.app $(pbpaste)

:: default : osascript -e 'display notification "default mode"'

:: skhd : osascript -e 'display notification "skhd mode"'
hyper - s ; skhd
# exit skhd mode with escape or return
skhd < escape ; default
skhd < return ; default
skhd < i : osascript -e 'display notification "currently in skhd mode"'
skhd < r : skhd -r; osascript -e 'display notification "reloading skhd mappings"'; skhd --key "escape"
skhd < shift - r : skhd --restart-service; osascript -e 'display notification "restarting skhd"'; skhd --key "escape"
skhd < s : skhd --start-service; osascript -e 'display notification "starting skhd"'; skhd --key "escape"
skhd < shift - s : skhd --stop-service; osascript -e 'display notification "stopping skhd"'; skhd --key "escape"

:: yabai : osascript -e 'display notification "yabai mode"'
hyper - y    ; yabai
cmd - return ; yabai
# exit yabai mode with escape or return
yabai < escape ; default
yabai < return ; default
yabai < i : osascript -e 'display notification "currently in yabai mode"'
yabai < r : yabai --restart-service; osascript -e 'display notification "restarting yabai"'; skhd --key "escape"
yabai < s : yabai --start-service; osascript -e 'display notification "starting yabai"'; skhd --key "escape"
yabai < shift - s : yabai --stop-service; osascript -e 'display notification "stopping yabai"'; skhd --key "escape"

# focus window
alt - h   : yabai -m window --focus west	>> .
alt - j   : yabai -m window --focus south
alt - k   : yabai -m window --focus north
alt - l   : yabai -m window --focus east
yabai < h : yabai -m window --focus west
yabai < j : yabai -m window --focus south
yabai < k : yabai -m window --focus north
yabai < l : yabai -m window --focus east

# swap managed window
shift + alt - h   : yabai -m window --swap west
shift + alt - j   : yabai -m window --swap south
shift + alt - k   : yabai -m window --swap north
shift + alt - l   : yabai -m window --swap east

# shift: resize
yabai < shift - h : yabai -m window --swap west
yabai < shift - j : yabai -m window --swap south
yabai < shift - k : yabai -m window --swap north
yabai < shift - l : yabai -m window --swap east

# ctrl: swap windows
yabai < ctrl - h : yabai -m window --resize left:-10:0 >> .yabai.log ; yabai -m window --resize right:-10:0  >> .yabai.log ; 
yabai < ctrl - j : yabai -m window --resize top:0:10   >> .yabai.log ; yabai -m window --resize bottom:0:10  >> .yabai.log ; 
yabai < ctrl - k : yabai -m window --resize top:0:-10  >> .yabai.log ; yabai -m window --resize bottom:0:-10 >> .yabai.log ; 
yabai < ctrl - l : yabai -m window --resize left:10:0  >> .yabai.log ; yabai -m window --resize right:10:0   >> .yabai.log ; 

# move managed window
shift + ctrl - h : yabai -m window --warp east  >> .yabai.log
shift + ctrl - j : yabai -m window --warp south >> .yabai.log
shift + ctrl - k : yabai -m window --warp north >> .yabai.log
shift + ctrl - l : yabai -m window --warp east  >> .yabai.log
yabai < alt - h  : yabai -m window --warp east  >> .yabai.log
yabai < alt - j  : yabai -m window --warp south >> .yabai.log
yabai < alt - k  : yabai -m window --warp north >> .yabai.log
yabai < alt - l  : yabai -m window --warp east  >> .yabai.log
